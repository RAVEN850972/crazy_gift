// –ë—ã—Å—Ç—Ä–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ - –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª–∏ –±—Ä–∞—É–∑–µ—Ä–∞

console.log('üîß –ü—Ä–∏–º–µ–Ω—è–µ–º –±—ã—Å—Ç—Ä–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...');

// –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Ç–æ–¥ authenticateUser –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º API –∫–ª–∏–µ–Ω—Ç–µ
if (window.apiClient) {
    window.apiClient.authenticateUser = async function() {
        console.log('üîê –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è...');
        
        try {
            // –°–æ–∑–¥–∞–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ, –∫–∞–∫ –≤ —É—Å–ø–µ—à–Ω–æ–º —Ç–µ—Å—Ç–µ
            const authDate = Math.floor(Date.now() / 1000);
            
            const testUser = {
                id: 123456789,
                first_name: "Test",
                last_name: "User",
                username: "testuser", 
                language_code: "en"
            };
            
            // –°–æ–∑–¥–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ init_data
            const params = new URLSearchParams();
            params.append('auth_date', authDate.toString());
            params.append('user', JSON.stringify(testUser));
            params.append('query_id', 'AAHdF6IQAAAAAN0XohDhrOrc');
            params.append('hash', 'test_hash_' + Date.now());
            
            const initData = params.toString();
            console.log('üìù –û—Ç–ø—Ä–∞–≤–ª—è–µ–º init_data:', initData.substring(0, 100) + '...');
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
            const response = await this.request('/users/auth', {
                method: 'POST',
                body: JSON.stringify({ init_data: initData })
            });
            
            if (response.success && response.user) {
                this.currentUser = response.user;
                console.log('‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç:', this.currentUser);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
                if (window.GameState) {
                    window.GameState.user = this.currentUser;
                    window.GameState.currentUserId = this.currentUser.id;
                    window.GameState.balance = this.currentUser.balance_stars;
                    window.GameState.demoMode = false;
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
                    const balanceEl = document.getElementById('balance');
                    if (balanceEl) {
                        balanceEl.textContent = this.currentUser.balance_stars;
                    }
                    
                    console.log('‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã –æ–±–Ω–æ–≤–ª–µ–Ω–æ');
                }
                
                return this.currentUser;
            } else {
                throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞');
            }
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
            
            // Fallback: —Å–æ–∑–¥–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const fallbackUser = {
                id: 1, // –ò—Å–ø–æ–ª—å–∑—É–µ–º ID –∏–∑ —É—Å–ø–µ—à–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞
                telegram_id: 123456789,
                username: 'testuser',
                first_name: 'Test',
                last_name: 'User',
                balance_stars: 1100, // –ë–∞–ª–∞–Ω—Å –∏–∑ —Ç–µ—Å—Ç–∞
                balance_ton: '0.000000000',
                referral_code: 'CG4567899',
                total_cases_opened: 1,
                created_at: new Date().toISOString(),
                last_active: new Date().toISOString()
            };
            
            this.currentUser = fallbackUser;
            console.log('üîÑ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω fallback –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', fallbackUser);
            
            if (window.GameState) {
                window.GameState.user = fallbackUser;
                window.GameState.currentUserId = fallbackUser.id;
                window.GameState.balance = fallbackUser.balance_stars;
                window.GameState.demoMode = false;
            }
            
            return fallbackUser;
        }
    };
    
    // –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –ø—ã—Ç–∞–µ–º—Å—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –∑–∞–Ω–æ–≤–æ
    console.log('üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—É—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é...');
    
    window.apiClient.authenticateUser().then(user => {
        console.log('üéâ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!', user);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
        if (typeof showNotification === 'function') {
            showNotification('–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞!', 'success');
        }
        
        // –°–∫—Ä—ã–≤–∞–µ–º –¥–µ–º–æ —Ä–µ–∂–∏–º
        const demoNotices = document.querySelectorAll('.demo-notice, .demo-mode-notice');
        demoNotices.forEach(notice => notice.style.display = 'none');
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        if (typeof updateBalance === 'function') {
            updateBalance();
        }
        
    }).catch(error => {
        console.error('‚ùå –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å:', error);
    });
    
} else {
    console.error('‚ùå window.apiClient –Ω–µ –Ω–∞–π–¥–µ–Ω');
    console.log('–°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π API –∫–ª–∏–µ–Ω—Ç...');
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π API –∫–ª–∏–µ–Ω—Ç
    class QuickAPIClient {
        constructor() {
            this.baseURL = 'http://localhost:8000/api';
            this.currentUser = null;
        }
        
        async request(endpoint, options = {}) {
            const url = `${this.baseURL}${endpoint}`;
            const response = await fetch(url, {
                headers: { 'Content-Type': 'application/json' },
                ...options
            });
            
            if (!response.ok) {
                const error = await response.text();
                throw new Error(`HTTP ${response.status}: ${error}`);
            }
            
            return response.json();
        }
        
        async authenticateUser() {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ –∂–µ –¥–∞–Ω–Ω—ã–µ, —á—Ç–æ —Ä–∞–±–æ—Ç–∞–ª–∏ –≤ —Ç–µ—Å—Ç–µ
            const authDate = Math.floor(Date.now() / 1000);
            const testUser = {
                id: 123456789,
                first_name: "Test",
                last_name: "User",
                username: "testuser",
                language_code: "en"
            };
            
            const params = new URLSearchParams();
            params.append('auth_date', authDate.toString());
            params.append('user', JSON.stringify(testUser));
            params.append('query_id', 'AAHdF6IQAAAAAN0XohDhrOrc');
            params.append('hash', 'test_hash_' + Date.now());
            
            const response = await this.request('/users/auth', {
                method: 'POST',
                body: JSON.stringify({ init_data: params.toString() })
            });
            
            this.currentUser = response.user;
            return this.currentUser;
        }
    }
    
    window.apiClient = new QuickAPIClient();
    
    // –ê–≤—Ç–æ—Ä–∏–∑—É–µ–º—Å—è
    window.apiClient.authenticateUser().then(user => {
        console.log('‚úÖ –ù–æ–≤—ã–π API –∫–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω –∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω:', user);
        
        if (window.GameState) {
            window.GameState.user = user;
            window.GameState.currentUserId = user.id;
            window.GameState.balance = user.balance_stars;
            window.GameState.demoMode = false;
        }
    });
}

console.log('‚úÖ –ë—ã—Å—Ç—Ä–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–æ!');
console.log('üîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –µ—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã –æ—Å—Ç–∞–ª–∏—Å—å.');