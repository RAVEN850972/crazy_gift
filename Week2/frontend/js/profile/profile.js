/**
 * CrazyGift Profile Page - –ü–æ–ª–Ω–∞—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
 * frontend/js/profile/profile.js
 * 
 * –ü–æ–ª–Ω–æ—Å—Ç—å—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—Ä–æ—Ñ–∏–ª—è —Å API –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π
 */

// ===================================================================
// –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï –ò –°–û–°–¢–û–Ø–ù–ò–ï
// ===================================================================

let profileData = {
    user: null,
    inventory: [],
    stats: {},
    isLoading: false
};

let currentFilter = 'all';
let isInitialized = false;

// ===================================================================
// –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –°–¢–†–ê–ù–ò–¶–´ –ü–†–û–§–ò–õ–Ø
// ===================================================================

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–æ—Ñ–∏–ª—è
 */
async function initializeProfilePage() {
    if (isInitialized) return;
    
    console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–æ—Ñ–∏–ª—è...');
    
    try {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π –ª–æ–∞–¥–µ—Ä
        showPageLoader();
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Telegram WebApp
        initTelegramApp();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API
        await checkAPIAvailability();
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await loadUserData();
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
        await loadInventoryData();
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º UI
        setupUI();
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        setupEventListeners();
        
        isInitialized = true;
        console.log('‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—Ä–æ—Ñ–∏–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–æ—Ñ–∏–ª—è:', error);
        showInitializationError(error);
    } finally {
        hidePageLoader();
    }
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API
 */
async function checkAPIAvailability() {
    try {
        if (window.apiClient) {
            const available = await window.apiClient.checkAvailability();
            console.log(`API ${available ? '‚úÖ –¥–æ—Å—Ç—É–ø–µ–Ω' : '‚ö†Ô∏è –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}`);
            return available;
        }
        return false;
    } catch (error) {
        console.warn('‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π API:', error);
        return false;
    }
}

// ===================================================================
// –ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–•
// ===================================================================

/**
 * –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
async function loadUserData() {
    try {
        console.log('üë§ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
        
        // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–ª–∏ API
        let user = window.GameState?.user || window.apiClient?.currentUser;
        
        if (!user && window.apiClient && window.GameState?.currentUserId) {
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å —á–µ—Ä–µ–∑ API
            user = await window.apiClient.getUserProfile(window.GameState.currentUserId);
        }
        
        if (!user) {
            throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }
        
        profileData.user = user;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º UI —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        updateUserInfo(user);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
        await updateUserBalance();
        
        console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', user);
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
        
        // –°–æ–∑–¥–∞–µ–º fallback –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        profileData.user = {
            id: 1,
            first_name: 'Test',
            last_name: 'User',
            username: 'testuser',
            balance_stars: window.GameState?.balance || 0,
            total_cases_opened: 0,
            created_at: new Date().toISOString()
        };
        
        updateUserInfo(profileData.user);
    }
}

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
async function updateUserBalance() {
    try {
        if (window.apiClient && window.GameState?.currentUserId && !window.GameState?.demoMode) {
            const balance = await window.apiClient.getUserBalance(window.GameState.currentUserId);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            window.GameState.balance = balance.balance_stars;
            if (profileData.user) {
                profileData.user.balance_stars = balance.balance_stars;
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            updateBalanceDisplay(balance.balance_stars);
            
            console.log('‚úÖ –ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª–µ–Ω:', balance.balance_stars);
        } else {
            // –í –¥–µ–º–æ —Ä–µ–∂–∏–º–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
            const currentBalance = window.GameState?.balance || 0;
            updateBalanceDisplay(currentBalance);
            console.log('‚ö†Ô∏è –î–µ–º–æ —Ä–µ–∂–∏–º: –±–∞–ª–∞–Ω—Å', currentBalance);
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:', error);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        const fallbackBalance = window.GameState?.balance || 0;
        updateBalanceDisplay(fallbackBalance);
    }
}

/**
 * –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
 */
async function loadInventoryData() {
    try {
        console.log('üì¶ –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å...');
        
        if (window.apiClient && window.GameState?.currentUserId && !window.GameState?.demoMode) {
            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å —á–µ—Ä–µ–∑ API
            const inventory = await window.apiClient.getInventory(window.GameState.currentUserId);
            profileData.inventory = inventory || [];
            
            console.log('‚úÖ –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ API:', inventory.length, '–ø—Ä–µ–¥–º–µ—Ç–æ–≤');
        } else {
            // –í –¥–µ–º–æ —Ä–µ–∂–∏–º–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Å—Ç–æ–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –∏–ª–∏ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            profileData.inventory = createDemoInventory();
            console.log('‚ö†Ô∏è –î–µ–º–æ —Ä–µ–∂–∏–º: –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å');
        }
        
        // –†–µ–Ω–¥–µ—Ä–∏–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
        renderInventory(profileData.inventory);
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
        await loadInventoryStats();
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è:', error);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
        showInventoryError();
        
        // –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
        profileData.inventory = [];
    }
}

/**
 * –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
 */
async function loadInventoryStats() {
    try {
        if (window.apiClient && window.GameState?.currentUserId && !window.GameState?.demoMode) {
            const stats = await window.apiClient.getInventoryStats(window.GameState.currentUserId);
            profileData.stats = stats;
            
            updateInventoryStats(stats);
            console.log('‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
        } else {
            // –°–æ–∑–¥–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            const stats = calculateLocalInventoryStats(profileData.inventory);
            profileData.stats = stats;
            updateInventoryStats(stats);
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è:', error);
    }
}

// ===================================================================
// –û–ë–ù–û–í–õ–ï–ù–ò–ï UI
// ===================================================================

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ UI
 */
function updateUserInfo(user) {
    try {
        // –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const nameElements = document.querySelectorAll('.username, .user-name, .profile-name');
        nameElements.forEach(el => {
            if (el) {
                const displayName = user.first_name || user.username || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
                el.textContent = displayName;
            }
        });
        
        // ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const idElements = document.querySelectorAll('.user-id, .profile-id');
        idElements.forEach(el => {
            if (el) {
                el.textContent = `ID: ${user.id || user.telegram_id || 'N/A'}`;
            }
        });
        
        // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∫–µ–π—Å–æ–≤
        const casesElements = document.querySelectorAll('.cases-opened, .total-cases');
        casesElements.forEach(el => {
            if (el) {
                el.textContent = user.total_cases_opened || 0;
            }
        });
        
        // –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        const dateElements = document.querySelectorAll('.join-date, .member-since');
        dateElements.forEach(el => {
            if (el && user.created_at) {
                const joinDate = new Date(user.created_at).toLocaleDateString('ru-RU');
                el.textContent = `–£—á–∞—Å—Ç–Ω–∏–∫ —Å ${joinDate}`;
            }
        });
        
        console.log('‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –≤ UI');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    }
}

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
 */
function updateBalanceDisplay(balance) {
    const balanceElements = document.querySelectorAll('#balance, .balance, .user-balance, .profile-balance');
    balanceElements.forEach(el => {
        if (el) {
            el.textContent = balance.toLocaleString();
        }
    });
}

/**
 * –†–µ–Ω–¥–µ—Ä –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
 */
function renderInventory(items) {
    const inventoryContainer = document.querySelector('.inventory-grid, .items-grid, .inventory-container');
    
    if (!inventoryContainer) {
        console.warn('‚ö†Ô∏è –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
    }
    
    // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    inventoryContainer.innerHTML = '';
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä
    const filteredItems = filterItems(items, currentFilter);
    
    if (!filteredItems || filteredItems.length === 0) {
        showEmptyInventory(inventoryContainer);
        return;
    }
    
    // –†–µ–Ω–¥–µ—Ä–∏–º –ø—Ä–µ–¥–º–µ—Ç—ã
    filteredItems.forEach(item => {
        const itemElement = createInventoryItemElement(item);
        inventoryContainer.appendChild(itemElement);
    });
    
    console.log('‚úÖ –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –æ—Ç—Ä–µ–Ω–¥–µ—Ä–µ–Ω:', filteredItems.length, '–ø—Ä–µ–¥–º–µ—Ç–æ–≤');
}

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –ø—Ä–µ–¥–º–µ—Ç–∞ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
 */
function createInventoryItemElement(item) {
    const itemElement = document.createElement('div');
    itemElement.className = `inventory-item rarity-${item.rarity || 'common'}`;
    itemElement.dataset.itemId = item.id;
    
    itemElement.innerHTML = `
        <div class="item-image">
            <img src="${item.image_url || 'assets/items/default.png'}" 
                 alt="${item.name}"
                 onerror="this.src='assets/items/default.png'"
                 loading="lazy">
            <div class="item-rarity-badge ${item.rarity || 'common'}">
                ${getRarityDisplayName(item.rarity)}
            </div>
        </div>
        <div class="item-info">
            <div class="item-name">${item.name}</div>
            <div class="item-value">${item.stars || item.value || 0} ‚≠ê</div>
            ${item.case_name ? `<div class="item-source">–ò–∑: ${item.case_name}</div>` : ''}
        </div>
        <div class="item-actions">
            <button class="sell-btn" onclick="sellInventoryItem(${item.id})" data-item-id="${item.id}">
                <span class="btn-text">–ü—Ä–æ–¥–∞—Ç—å</span>
                <span class="btn-loader" style="display: none;">‚è≥</span>
            </button>
            ${item.stars >= 1000 ? `
                <button class="withdraw-btn" onclick="requestItemWithdrawal(${item.id})" data-item-id="${item.id}">
                    –í—ã–≤–µ—Å—Ç–∏
                </button>
            ` : ''}
        </div>
    `;
    
    return itemElement;
}

/**
 * –ü–æ–∫–∞–∑ –ø—É—Å—Ç–æ–≥–æ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
 */
function showEmptyInventory(container) {
    container.innerHTML = `
        <div class="empty-inventory">
            <div class="empty-icon">üì¶</div>
            <div class="empty-title">–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø—É—Å—Ç</div>
            <div class="empty-subtitle">–û—Ç–∫—Ä–æ–π—Ç–µ –∫–µ–π—Å—ã, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã</div>
            <button class="open-cases-btn" onclick="window.location.href='index.html'">
                –û—Ç–∫—Ä—ã—Ç—å –∫–µ–π—Å—ã
            </button>
        </div>
    `;
}

/**
 * –ü–æ–∫–∞–∑ –æ—à–∏–±–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
 */
function showInventoryError() {
    const inventoryContainer = document.querySelector('.inventory-grid, .items-grid, .inventory-container');
    
    if (inventoryContainer) {
        inventoryContainer.innerHTML = `
            <div class="inventory-error">
                <div class="error-icon">‚ö†Ô∏è</div>
                <div class="error-title">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</div>
                <div class="error-subtitle">–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å</div>
                <button class="retry-btn" onclick="loadInventoryData()">
                    –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
                </button>
            </div>
        `;
    }
}

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
 */
function updateInventoryStats(stats) {
    try {
        // –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
        const totalItemsEl = document.querySelector('.total-items, .inventory-count');
        if (totalItemsEl) {
            totalItemsEl.textContent = stats.total_items || profileData.inventory.length || 0;
        }
        
        // –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤ –∑–≤–µ–∑–¥–∞—Ö
        const totalValueEl = document.querySelector('.total-value, .portfolio-value');
        if (totalValueEl) {
            const totalStars = stats.portfolio_stars || 
                              profileData.inventory.reduce((sum, item) => sum + (item.stars || 0), 0);
            totalValueEl.textContent = totalStars.toLocaleString();
        }
        
        // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ —Ä–µ–¥–∫–æ—Å—Ç—è–º
        if (stats.by_rarity) {
            Object.entries(stats.by_rarity).forEach(([rarity, count]) => {
                const rarityEl = document.querySelector(`.rarity-count[data-rarity="${rarity}"]`);
                if (rarityEl) {
                    rarityEl.textContent = count;
                }
            });
        }
        
        console.log('‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
    }
}

// ===================================================================
// –§–£–ù–ö–¶–ò–û–ù–ê–õ –ü–†–ï–î–ú–ï–¢–û–í
// ===================================================================

/**
 * –ü—Ä–æ–¥–∞–∂–∞ –ø—Ä–µ–¥–º–µ—Ç–∞ –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
 */
window.sellInventoryItem = async function(itemId) {
    if (!itemId) {
        console.error('‚ùå Item ID –Ω–µ —É–∫–∞–∑–∞–Ω');
        return;
    }
    
    try {
        // –ù–∞—Ö–æ–¥–∏–º –ø—Ä–µ–¥–º–µ—Ç –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ
        const item = profileData.inventory.find(i => i.id == itemId);
        if (!item) {
            throw new Error('–ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ');
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        const confirmed = await showSellConfirmation(item);
        if (!confirmed) return;
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–æ–∞–¥–µ—Ä
        showSellLoader(itemId);
        
        let result;
        
        if (window.apiClient && !window.GameState?.demoMode) {
            // –ü—Ä–æ–¥–∞–µ–º —á–µ—Ä–µ–∑ API
            result = await window.apiClient.sellItem(itemId, window.GameState.currentUserId);
        } else {
            // –°–∏–º—É–ª—è—Ü–∏—è –ø—Ä–æ–¥–∞–∂–∏ –≤ –¥–µ–º–æ —Ä–µ–∂–∏–º–µ
            result = {
                success: true,
                earned_stars: item.stars || item.value || 100,
                new_balance: (window.GameState?.balance || 0) + (item.stars || 100)
            };
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            window.GameState.balance = result.new_balance;
        }
        
        if (result.success) {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            showNotification(`–ü—Ä–µ–¥–º–µ—Ç "${item.name}" –ø—Ä–æ–¥–∞–Ω –∑–∞ ${result.earned_stars} –∑–≤—ë–∑–¥!`, 'success');
            
            // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥–º–µ—Ç –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
            profileData.inventory = profileData.inventory.filter(i => i.id != itemId);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º UI
            removeItemFromGrid(itemId);
            updateBalanceDisplay(result.new_balance || window.GameState?.balance || 0);
            
            // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            await loadInventoryStats();
            
        } else {
            throw new Error(result.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–¥–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç');
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–¥–∞–∂–∏ –ø—Ä–µ–¥–º–µ—Ç–∞:', error);
        showNotification(`–û—à–∏–±–∫–∞ –ø—Ä–æ–¥–∞–∂–∏: ${error.message}`, 'error');
    } finally {
        hideSellLoader(itemId);
    }
};

/**
 * –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ –ø—Ä–µ–¥–º–µ—Ç–∞
 */
window.requestItemWithdrawal = async function(itemId) {
    try {
        const item = profileData.inventory.find(i => i.id == itemId);
        if (!item) {
            throw new Error('–ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }
        
        if ((item.stars || 0) < 1000) {
            showNotification('–ú–æ–∂–Ω–æ –≤—ã–≤–æ–¥–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã —Å—Ç–æ–∏–º–æ—Å—Ç—å—é –æ—Ç 1000 –∑–≤—ë–∑–¥', 'warning');
            return;
        }
        
        const confirmed = confirm(`–ó–∞–ø—Ä–æ—Å–∏—Ç—å –≤—ã–≤–æ–¥ –ø—Ä–µ–¥–º–µ—Ç–∞ "${item.name}"?\n–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤.`);
        if (!confirmed) return;
        
        if (window.apiClient && !window.GameState?.demoMode) {
            const result = await window.apiClient.requestItemWithdrawal(itemId, window.GameState.currentUserId);
            
            if (result.success) {
                showNotification('–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!', 'success');
                
                // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
                await loadInventoryData();
            } else {
                throw new Error(result.message);
            }
        } else {
            // –î–µ–º–æ —Ä–µ–∂–∏–º
            showNotification('–î–µ–º–æ —Ä–µ–∂–∏–º: –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ —Å–∏–º—É–ª–∏—Ä–æ–≤–∞–Ω', 'info');
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤—ã–≤–æ–¥–∞:', error);
        showNotification(`–û—à–∏–±–∫–∞: ${error.message}`, 'error');
    }
};

// ===================================================================
// –§–ò–õ–¨–¢–†–ê–¶–ò–Ø –ò –°–û–†–¢–ò–†–û–í–ö–ê
// ===================================================================

/**
 * –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –ø–æ —Ä–µ–¥–∫–æ—Å—Ç–∏
 */
function filterItems(items, filter) {
    if (!items) return [];
    
    if (filter === 'all') {
        return items;
    }
    
    return items.filter(item => item.rarity === filter);
}

/**
 * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞
 */
function setInventoryFilter(filter) {
    currentFilter = filter;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∫–Ω–æ–ø–∫—É —Ñ–∏–ª—å—Ç—Ä–∞
    const filterButtons = document.querySelectorAll('.filter-btn');
    filterButtons.forEach(btn => {
        btn.classList.remove('active');
        if (btn.dataset.filter === filter) {
            btn.classList.add('active');
        }
    });
    
    // –ü–µ—Ä–µ—Ä–µ–Ω–¥–µ—Ä–∏–≤–∞–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
    renderInventory(profileData.inventory);
    
    console.log('üîç –§–∏–ª—å—Ç—Ä —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:', filter);
}

// ===================================================================
// –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
// ===================================================================

/**
 * –ü–æ–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø—Ä–æ–¥–∞–∂–∏
 */
async function showSellConfirmation(item) {
    const message = `–ü—Ä–æ–¥–∞—Ç—å "${item.name}" –∑–∞ ${item.stars || item.value || 0} –∑–≤—ë–∑–¥?`;
    
    if (typeof showConfirmModal === 'function') {
        return await showConfirmModal(message);
    }
    
    return confirm(message);
}

/**
 * –ü–æ–∫–∞–∑/—Å–∫—Ä—ã—Ç–∏–µ –ª–æ–∞–¥–µ—Ä–æ–≤ –ø—Ä–æ–¥–∞–∂–∏
 */
function showSellLoader(itemId) {
    const button = document.querySelector(`[data-item-id="${itemId}"] .sell-btn`);
    if (button) {
        const text = button.querySelector('.btn-text');
        const loader = button.querySelector('.btn-loader');
        
        if (text) text.style.display = 'none';
        if (loader) loader.style.display = 'inline';
        
        button.disabled = true;
    }
}

function hideSellLoader(itemId) {
    const button = document.querySelector(`[data-item-id="${itemId}"] .sell-btn`);
    if (button) {
        const text = button.querySelector('.btn-text');
        const loader = button.querySelector('.btn-loader');
        
        if (text) text.style.display = 'inline';
        if (loader) loader.style.display = 'none';
        
        button.disabled = false;
    }
}

/**
 * –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –∏–∑ —Å–µ—Ç–∫–∏
 */
function removeItemFromGrid(itemId) {
    const itemElement = document.querySelector(`[data-item-id="${itemId}"]`);
    if (itemElement) {
        itemElement.style.animation = 'fadeOut 0.3s ease-out';
        setTimeout(() => {
            itemElement.remove();
        }, 300);
    }
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–≥–æ –∏–º–µ–Ω–∏ —Ä–µ–¥–∫–æ—Å—Ç–∏
 */
function getRarityDisplayName(rarity) {
    const rarityNames = {
        'common': '–û–±—ã—á–Ω—ã–π',
        'rare': '–†–µ–¥–∫–∏–π', 
        'epic': '–≠–ø–∏—á–µ—Å–∫–∏–π',
        'legendary': '–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π',
        'mythic': '–ú–∏—Ñ–∏—á–µ—Å–∫–∏–π'
    };
    
    return rarityNames[rarity] || '–û–±—ã—á–Ω—ã–π';
}

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–º–æ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
 */
function createDemoInventory() {
    return [
        {
            id: 1,
            name: '–î–µ–º–æ –ø—Ä–µ–¥–º–µ—Ç',
            rarity: 'common',
            stars: 150,
            image_url: 'assets/items/demo.png',
            case_name: '–î–µ–º–æ –∫–µ–π—Å'
        }
    ];
}

/**
 * –†–∞—Å—á–µ—Ç –ª–æ–∫–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
 */
function calculateLocalInventoryStats(items) {
    if (!items || items.length === 0) {
        return {
            total_items: 0,
            portfolio_stars: 0,
            by_rarity: {}
        };
    }
    
    const stats = {
        total_items: items.length,
        portfolio_stars: items.reduce((sum, item) => sum + (item.stars || 0), 0),
        by_rarity: {}
    };
    
    // –ü–æ–¥—Å—á–µ—Ç –ø–æ —Ä–µ–¥–∫–æ—Å—Ç—è–º
    items.forEach(item => {
        const rarity = item.rarity || 'common';
        stats.by_rarity[rarity] = (stats.by_rarity[rarity] || 0) + 1;
    });
    
    return stats;
}

/**
 * –ü–æ–∫–∞–∑/—Å–∫—Ä—ã—Ç–∏–µ –ª–æ–∞–¥–µ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
 */
function showPageLoader() {
    // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π –ª–æ–∞–¥–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    console.log('‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã...');
}

function hidePageLoader() {
    console.log('‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
}

/**
 * –ü–æ–∫–∞–∑ –æ—à–∏–±–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
 */
function showInitializationError(error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
    
    if (typeof showNotification === 'function') {
        showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã', 'error');
    }
}

// ===================================================================
// –ù–ê–°–¢–†–û–ô–ö–ê UI –ò –°–û–ë–´–¢–ò–ô
// ===================================================================

/**
 * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
 */
function setupUI() {
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
    const filterButtons = document.querySelectorAll('.filter-btn');
    filterButtons.forEach(btn => {
        btn.addEventListener('click', () => {
            const filter = btn.dataset.filter || 'all';
            setInventoryFilter(filter);
        });
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    const refreshButtons = document.querySelectorAll('.refresh-btn, .reload-btn');
    refreshButtons.forEach(btn => {
        btn.addEventListener('click', () => {
            loadInventoryData();
        });
    });
}

/**
 * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
 */
function setupEventListeners() {
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –Ω–∞–∑–∞–¥ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    const backButton = document.querySelector('.back-btn');
    if (backButton) {
        backButton.addEventListener('click', () => {
            window.history.back();
        });
    }
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è pull-to-refresh (–µ—Å–ª–∏ –Ω—É–∂–µ–Ω)
    let startY = 0;
    let currentY = 0;
    let pullDistance = 0;
    
    document.addEventListener('touchstart', (e) => {
        startY = e.touches[0].clientY;
    });
    
    document.addEventListener('touchmove', (e) => {
        currentY = e.touches[0].clientY;
        pullDistance = currentY - startY;
        
        if (pullDistance > 100 && window.scrollY === 0) {
            // Pull to refresh –ª–æ–≥–∏–∫–∞
            e.preventDefault();
        }
    });
    
    document.addEventListener('touchend', () => {
        if (pullDistance > 150 && window.scrollY === 0) {
            // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
            loadInventoryData();
        }
        
        pullDistance = 0;
    });
}

// ===================================================================
// TELEGRAM WEBAPP –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø
// ===================================================================

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram WebApp
 */
function initTelegramApp() {
    if (window.Telegram?.WebApp) {
        const tg = window.Telegram.WebApp;
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤–Ω–µ—à–Ω–∏–π –≤–∏–¥
        tg.setHeaderColor('#1a1a1a');
        tg.setBottomBarColor('#ffffff');
        
        // –†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        tg.expand();
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥
        if (tg.BackButton) {
            tg.BackButton.show();
            tg.BackButton.onClick(() => {
                window.history.back();
            });
        }
        
        // –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        tg.ready();
        
        console.log('‚úÖ Telegram WebApp –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }
}

// ===================================================================
// –ì–õ–û–ë–ê–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò
// ===================================================================

/**
 * –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
 */
window.updateBalanceFromAPI = updateUserBalance;

/**
 * –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏) 
 */
window.loadInventoryFromAPI = loadInventoryData;

/**
 * –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
 */
window.updateStats = function() {
    if (profileData.user) {
        updateUserInfo(profileData.user);
    }
    
    if (profileData.stats) {
        updateInventoryStats(profileData.stats);
    }
};

/**
 * –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (fallback –µ—Å–ª–∏ –Ω–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏)
 */
function showNotification(message, type = 'info') {
    if (typeof window.showNotification === 'function') {
        window.showNotification(message, type);
    } else {
        // –ü—Ä–æ—Å—Ç–æ–π fallback
        console.log(`${type.toUpperCase()}: ${message}`);
        alert(message);
    }
}

// ===================================================================
// –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ü–†–ò –ó–ê–ì–†–£–ó–ö–ï –°–¢–†–ê–ù–ò–¶–´
// ===================================================================

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ DOM
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initializeProfilePage);
} else {
    // DOM —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω
    initializeProfilePage();
}

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
window.profileDebug = {
    loadInventory: loadInventoryData,
    loadUser: loadUserData,
    updateBalance: updateUserBalance,
    updateStats: window.updateStats,
    sellItem: window.sellInventoryItem,
    setFilter: setInventoryFilter,
    data: profileData
};

console.log('‚úÖ Profile.js –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ');
console.log('üîß –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ window.profileDebug –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏');