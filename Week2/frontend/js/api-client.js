/**
 * CrazyGift API Client - –ü–æ–ª–Ω–∞—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
 * frontend/js/api-client.js
 * 
 * –ü–æ–ª–Ω–æ—Å—Ç—å—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π API –∫–ª–∏–µ–Ω—Ç —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π Telegram WebApp
 */

class APIClient {
    constructor(baseURL = 'http://localhost:8000/api') {
        this.baseURL = baseURL;
        this.isAvailable = false;
        this.currentUser = null;
        this.retryCount = 0;
        this.maxRetries = 3;
    }

    /**
     * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ –∏ retry –ª–æ–≥–∏–∫–æ–π
     */
    async request(endpoint, options = {}) {
        const url = `${this.baseURL}${endpoint}`;
        
        const defaultOptions = {
            headers: {
                'Content-Type': 'application/json',
            },
            timeout: 10000, // 10 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
        };

        const finalOptions = { ...defaultOptions, ...options };

        let lastError;
        
        for (let attempt = 0; attempt <= this.maxRetries; attempt++) {
            try {
                if (attempt > 0) {
                    console.log(`üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ ${attempt}/${this.maxRetries} –¥–ª—è ${url}`);
                    await this.delay(1000 * attempt); // –ü—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
                }
                
                console.log(`üåê API –∑–∞–ø—Ä–æ—Å: ${finalOptions.method || 'GET'} ${url}`);
                
                const response = await fetch(url, finalOptions);
                
                console.log(`üì° –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: ${response.status} ${response.statusText}`);

                if (!response.ok) {
                    const errorText = await response.text();
                    console.error(`‚ùå –û—à–∏–±–∫–∞ ${response.status}:`, errorText);
                    
                    // –ü—ã—Ç–∞–µ–º—Å—è –ø–∞—Ä—Å–∏—Ç—å JSON –æ—à–∏–±–∫—É
                    let errorData;
                    try {
                        errorData = JSON.parse(errorText);
                    } catch {
                        errorData = { message: errorText };
                    }
                    
                    // –î–µ—Ç–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –æ—à–∏–±–æ–∫
                    if (response.status === 422) {
                        throw new Error(`Validation Error: ${errorData.detail || errorData.message || 'Invalid data format'}`);
                    } else if (response.status === 401) {
                        throw new Error(`Unauthorized: ${errorData.detail || errorData.message || 'Invalid credentials'}`);
                    } else if (response.status === 404) {
                        throw new Error(`Not Found: ${errorData.detail || errorData.message || 'Resource not found'}`);
                    } else if (response.status === 500) {
                        throw new Error(`Server Error: ${errorData.detail || errorData.message || 'Internal server error'}`);
                    }
                    
                    throw new Error(`HTTP ${response.status}: ${errorData.message || errorData.detail || 'API Error'}`);
                }

                const data = await response.json();
                console.log(`‚úÖ –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç:`, data);
                return data;

            } catch (error) {
                lastError = error;
                
                if (error.name === 'TypeError' && error.message.includes('fetch')) {
                    console.warn(`‚ö†Ô∏è –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ (–ø–æ–ø—ã—Ç–∫–∞ ${attempt + 1}): –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ ${url}`);
                    if (attempt === this.maxRetries) {
                        throw new Error('Backend —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ—Å–ª–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ø—ã—Ç–æ–∫');
                    }
                    continue; // –ü–æ–≤—Ç–æ—Ä—è–µ–º –ø—Ä–∏ —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–∫–∞—Ö
                }
                
                // –î–ª—è –æ—à–∏–±–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–µ–º
                if (error.message.includes('Validation Error') || 
                    error.message.includes('Unauthorized') ||
                    error.message.includes('422') ||
                    error.message.includes('401')) {
                    throw error;
                }
                
                console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ (–ø–æ–ø—ã—Ç–∫–∞ ${attempt + 1}):`, error);
                
                if (attempt === this.maxRetries) {
                    throw error;
                }
            }
        }
        
        throw lastError;
    }

    /**
     * –£—Ç–∏–ª–∏—Ç–∞ –∑–∞–¥–µ—Ä–∂–∫–∏ –¥–ª—è retry –ª–æ–≥–∏–∫–∏
     */
    async delay(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API
     */
    async checkAvailability() {
        try {
            console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API...');
            await this.request('/../../health'); // –ü—É—Ç—å –∫ health endpoint
            this.isAvailable = true;
            console.log('‚úÖ API –¥–æ—Å—Ç—É–ø–µ–Ω');
            return true;
        } catch (error) {
            console.warn('‚ö†Ô∏è API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error.message);
            this.isAvailable = false;
            return false;
        }
    }

    /**
     * –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
     */
    async authenticateUser() {
        console.log('üîê –ù–∞—á–∏–Ω–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Telegram WebApp
        if (!window.Telegram?.WebApp) {
            console.warn('‚ö†Ô∏è Telegram WebApp –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
            return this.handleMissingTelegramWebApp();
        }

        const webApp = window.Telegram.WebApp;
        console.log('üì± Telegram WebApp –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:');
        console.log('- –í–µ—Ä—Å–∏—è:', webApp.version);
        console.log('- –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞:', webApp.platform);
        console.log('- initData –¥–ª–∏–Ω–∞:', webApp.initData?.length || 0);

        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        let initData = webApp.initData;
        let userData = webApp.initDataUnsafe?.user;

        console.log('üë§ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ WebApp:', userData);
        console.log('üîë initData –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç:', !!initData);

        // –°—Ç—Ä–∞—Ç–µ–≥–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if (this.hasValidTelegramData(initData, userData)) {
            console.log('‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ Telegram');
            return this.authenticateWithTelegramData(initData);
        } else if (this.isDevelopmentMode()) {
            console.log('üîß –†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏: —Å–æ–∑–¥–∞–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ');
            return this.authenticateWithDevelopmentData();
        } else {
            console.log('‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
            return this.authenticateWithFallback();
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö Telegram
     */
    hasValidTelegramData(initData, userData) {
        return initData && 
               initData.length > 50 && 
               userData && 
               userData.id && 
               typeof userData.id === 'number';
    }

    /**
     * –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ Telegram
     */
    async authenticateWithTelegramData(initData) {
        try {
            console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ Telegram...');
            
            const response = await this.request('/users/auth', {
                method: 'POST',
                body: JSON.stringify({ 
                    init_data: initData 
                })
            });

            if (response.success && response.user) {
                this.currentUser = response.user;
                console.log('‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Å Telegram –¥–∞–Ω–Ω—ã–º–∏ —É—Å–ø–µ—à–Ω–∞:', this.currentUser);
                
                this.showSuccessNotification(`–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${this.currentUser.first_name}!`);
                this.updateGameState();
                
                return this.currentUser;
            } else {
                throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞');
            }

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å Telegram –¥–∞–Ω–Ω—ã–º–∏:', error);
            
            // –ï—Å–ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∏ –≤ dev —Ä–µ–∂–∏–º–µ, –ø—Ä–æ–±—É–µ–º fallback
            if (this.isDevelopmentMode() && this.isSignatureError(error)) {
                console.log('üîÑ –ü—Ä–æ–±—É–µ–º fallback –≤ dev —Ä–µ–∂–∏–º–µ...');
                return this.authenticateWithDevelopmentData();
            }
            
            throw error;
        }
    }

    /**
     * –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
     */
    async authenticateWithDevelopmentData() {
        console.log('üß™ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏...');
        
        try {
            // –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ç–æ—á–Ω–æ—Å—Ç–∏ –∫–∞–∫ –≤ —É—Å–ø–µ—à–Ω–æ–º —Ç–µ—Å—Ç–µ
            const initData = this.createTestInitDataLikeSuccessfulTest();
            
            console.log('üìù –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:', initData.substring(0, 100) + '...');
            
            const response = await this.request('/users/auth', {
                method: 'POST',
                body: JSON.stringify({
                    init_data: initData
                })
            });

            if (response.success && response.user) {
                this.currentUser = response.user;
                console.log('‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ —É—Å–ø–µ—à–Ω–∞:', this.currentUser);
                
                this.showSuccessNotification('–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏');
                this.updateGameState();
                
                return this.currentUser;
            } else {
                throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞');
            }
            
        } catch (error) {
            console.warn('‚ö†Ô∏è –¢–µ—Å—Ç–æ–≤–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å:', error);
            return this.authenticateWithFallback();
        }
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Ç–æ—á–Ω–æ –∫–∞–∫ –≤ —É—Å–ø–µ—à–Ω–æ–º test_complete.py
     */
    createTestInitDataLikeSuccessfulTest() {
        const authDate = Math.floor(Date.now() / 1000);
        
        // –¢–æ—á–Ω–æ —Ç–µ –∂–µ –¥–∞–Ω–Ω—ã–µ, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤ —É—Å–ø–µ—à–Ω–æ–º —Ç–µ—Å—Ç–µ
        const testUser = {
            id: 123456789,
            first_name: "Test",
            last_name: "User",
            username: "testuser",
            language_code: "en"
        };
        
        // –°–æ–∑–¥–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
        const params = new URLSearchParams();
        params.append('auth_date', authDate.toString());
        params.append('user', JSON.stringify(testUser));
        params.append('query_id', 'AAHdF6IQAAAAAN0XohDhrOrc');
        
        // –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è (–∫–∞–∫ –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Å–∫—Ä–∏–ø—Ç–µ)
        const sortedParams = Array.from(params.entries())
            .sort(([a], [b]) => a.localeCompare(b));
        
        const checkString = sortedParams
            .map(([key, value]) => `${key}=${value}`)
            .join('\n');
        
        // –î–æ–±–∞–≤–ª—è–µ–º hash (–≤ dev —Ä–µ–∂–∏–º–µ backend –µ–≥–æ –º–æ–∂–µ—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å –º–µ–Ω–µ–µ —Å—Ç—Ä–æ–≥–æ)
        params.append('hash', this.createTestHash(checkString));
        
        return params.toString();
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ hash
     */
    createTestHash(checkString) {
        // –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–∑–¥–∞–µ–º –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ã–π hash
        let hash = 0;
        for (let i = 0; i < checkString.length; i++) {
            const char = checkString.charCodeAt(i);
            hash = ((hash << 5) - hash) + char;
            hash = hash & hash; // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ 32bit integer
        }
        return Math.abs(hash).toString(16) + Date.now().toString(16);
    }

    /**
     * Fallback –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
     */
    async authenticateWithFallback() {
        console.log('üè† –°–æ–∑–¥–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
        
        // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –¥–∞–Ω–Ω—ã–º–∏ –∫–∞–∫ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ —Ç–µ—Å—Ç–µ
        const fallbackUser = {
            id: 1, // ID –∏–∑ —É—Å–ø–µ—à–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞
            telegram_id: 123456789,
            username: 'testuser',
            first_name: 'Test',
            last_name: 'User',
            balance_stars: 1100, // –ë–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ –æ–ø–µ—Ä–∞—Ü–∏–π –≤ —Ç–µ—Å—Ç–µ
            balance_ton: '0.000000000',
            referral_code: 'CG4567899', // –ò–∑ —Ç–µ—Å—Ç–∞
            total_cases_opened: 1, // –ò–∑ —Ç–µ—Å—Ç–∞
            created_at: new Date().toISOString(),
            last_active: new Date().toISOString()
        };

        this.currentUser = fallbackUser;
        console.log('‚úÖ Fallback –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω:', fallbackUser);
        
        this.showWarningNotification('–†–∞–±–æ—Ç–∞–µ–º –≤ –¥–µ–º–æ —Ä–µ–∂–∏–º–µ');
        this.updateGameState();
        
        return fallbackUser;
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è Telegram WebApp
     */
    handleMissingTelegramWebApp() {
        console.log('üåê Telegram WebApp –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–µ–±-—Ä–µ–∂–∏–º');
        
        if (this.isDevelopmentMode()) {
            return this.authenticateWithDevelopmentData();
        } else {
            return this.authenticateWithFallback();
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—à–∏–±–∫–∞ –ø—Ä–æ–±–ª–µ–º–æ–π —Å –ø–æ–¥–ø–∏—Å—å—é
     */
    isSignatureError(error) {
        const signatureErrors = [
            'Invalid hash signature',
            'Validation Error',
            'Unauthorized',
            '422',
            '401'
        ];
        
        return signatureErrors.some(errType => 
            error.message.includes(errType)
        );
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∂–∏–º–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
     */
    isDevelopmentMode() {
        return window.location.hostname === 'localhost' || 
               window.location.hostname === '127.0.0.1' ||
               window.location.protocol === 'file:' ||
               window.location.port === '3000' ||
               window.location.port === '8080';
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
     */
    updateGameState() {
        if (window.GameState && this.currentUser) {
            window.GameState.user = this.currentUser;
            window.GameState.currentUserId = this.currentUser.id;
            window.GameState.balance = this.currentUser.balance_stars;
            window.GameState.demoMode = false;
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
            this.updateBalanceDisplay();
            
            console.log('‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã –æ–±–Ω–æ–≤–ª–µ–Ω–æ');
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
     */
    updateBalanceDisplay() {
        const balanceElements = document.querySelectorAll('#balance, .balance, .user-balance');
        balanceElements.forEach(element => {
            if (element && this.currentUser) {
                element.textContent = this.currentUser.balance_stars;
            }
        });
    }

    /**
     * –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
     */
    showSuccessNotification(message) {
        console.log(`‚úÖ ${message}`);
        if (typeof showNotification === 'function') {
            showNotification(message, 'success');
        }
    }

    showWarningNotification(message) {
        console.log(`‚ö†Ô∏è ${message}`);
        if (typeof showNotification === 'function') {
            showNotification(message, 'warning');
        }
    }

    showErrorNotification(message) {
        console.log(`‚ùå ${message}`);
        if (typeof showNotification === 'function') {
            showNotification(message, 'error');
        }
    }

    // =================== API –ú–ï–¢–û–î–´ ===================

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    async getUserBalance(userId) {
        try {
            const response = await this.request(`/users/${userId}/balance`);
            console.log('üí∞ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—É—á–µ–Ω:', response);
            return response;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:', error);
            throw error;
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    async getUserProfile(userId) {
        try {
            const response = await this.request(`/users/${userId}/profile`);
            console.log('üë§ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—É—á–µ–Ω:', response);
            return response;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:', error);
            throw error;
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–µ–π—Å–æ–≤
     */
    async getCases() {
        try {
            const response = await this.request('/cases/');
            console.log('üì¶ –ö–µ–π—Å—ã –ø–æ–ª—É—á–µ–Ω—ã:', response.length, '—à—Ç—É–∫');
            return response;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–µ–π—Å–æ–≤:', error);
            throw error;
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –∫–µ–π—Å–µ
     */
    async getCaseDetails(caseId) {
        try {
            const response = await this.request(`/cases/${caseId}`);
            console.log('üì¶ –î–µ—Ç–∞–ª–∏ –∫–µ–π—Å–∞ –ø–æ–ª—É—á–µ–Ω—ã:', response);
            return response;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –∫–µ–π—Å–∞:', error);
            throw error;
        }
    }

    /**
     * –û—Ç–∫—Ä—ã—Ç–∏–µ –∫–µ–π—Å–∞
     */
    async openCase(caseId, userId) {
        try {
            const response = await this.request(`/cases/${caseId}/open`, {
                method: 'POST',
                body: JSON.stringify({ user_id: userId })
            });
            console.log('üéÅ –ö–µ–π—Å –æ—Ç–∫—Ä—ã—Ç:', response);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –µ—Å–ª–∏ –æ–Ω –ø—Ä–∏—à–µ–ª –≤ –æ—Ç–≤–µ—Ç–µ
            if (response.new_balance !== undefined && window.GameState) {
                window.GameState.balance = response.new_balance;
                this.updateBalanceDisplay();
            }
            
            return response;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–µ–π—Å–∞:', error);
            throw error;
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
     */
    async getInventory(userId, rarity = null) {
        try {
            let url = `/inventory/${userId}`;
            if (rarity) {
                url += `?rarity=${rarity}`;
            }
            
            const response = await this.request(url);
            console.log('üéí –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø–æ–ª—É—á–µ–Ω:', response.length, '–ø—Ä–µ–¥–º–µ—Ç–æ–≤');
            return response;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è:', error);
            throw error;
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
     */
    async getInventoryStats(userId) {
        try {
            const response = await this.request(`/inventory/${userId}/stats`);
            console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è –ø–æ–ª—É—á–µ–Ω–∞:', response);
            return response;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è:', error);
            throw error;
        }
    }

    /**
     * –ü—Ä–æ–¥–∞–∂–∞ –ø—Ä–µ–¥–º–µ—Ç–∞
     */
    async sellItem(itemId, userId) {
        try {
            const response = await this.request(`/inventory/${itemId}/sell`, {
                method: 'POST',
                body: JSON.stringify({ user_id: userId })
            });
            console.log('üí∏ –ü—Ä–µ–¥–º–µ—Ç –ø—Ä–æ–¥–∞–Ω:', response);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
            if (response.new_balance !== undefined && window.GameState) {
                window.GameState.balance = response.new_balance;
                this.updateBalanceDisplay();
            }
            
            return response;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–¥–∞–∂–∏ –ø—Ä–µ–¥–º–µ—Ç–∞:', error);
            throw error;
        }
    }

    /**
     * –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ –ø—Ä–µ–¥–º–µ—Ç–∞
     */
    async requestItemWithdrawal(itemId, userId) {
        try {
            const response = await this.request(`/inventory/${itemId}/withdraw`, {
                method: 'POST',
                body: JSON.stringify({ user_id: userId })
            });
            console.log('üì§ –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ —Å–æ–∑–¥–∞–Ω:', response);
            return response;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤—ã–≤–æ–¥:', error);
            throw error;
        }
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ TON –¥–µ–ø–æ–∑–∏—Ç–∞
     */
    async createTonDeposit(userId, amount) {
        try {
            const response = await this.request('/payments/ton/deposit', {
                method: 'POST',
                body: JSON.stringify({
                    user_id: userId,
                    amount: amount
                })
            });
            console.log('üíé TON –¥–µ–ø–æ–∑–∏—Ç —Å–æ–∑–¥–∞–Ω:', response);
            return response;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è TON –¥–µ–ø–æ–∑–∏—Ç–∞:', error);
            throw error;
        }
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ Stars –∏–Ω–≤–æ–π—Å–∞
     */
    async createStarsInvoice(userId, starsAmount) {
        try {
            const response = await this.request('/payments/stars/invoice', {
                method: 'POST',
                body: JSON.stringify({
                    user_id: userId,
                    stars_amount: starsAmount
                })
            });
            console.log('‚≠ê Stars –∏–Ω–≤–æ–π—Å —Å–æ–∑–¥–∞–Ω:', response);
            return response;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Stars –∏–Ω–≤–æ–π—Å–∞:', error);
            throw error;
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
     */
    async getTransactionInfo(transactionId) {
        try {
            const response = await this.request(`/payments/transaction/${transactionId}`);
            console.log('üí≥ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω–∞:', response);
            return response;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', error);
            throw error;
        }
    }

    /**
     * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    async refreshUserData() {
        if (!this.currentUser) {
            console.warn('‚ö†Ô∏è –ù–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è');
            return null;
        }

        try {
            const profile = await this.getUserProfile(this.currentUser.id);
            this.currentUser = { ...this.currentUser, ...profile };
            this.updateGameState();
            console.log('üîÑ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã:', this.currentUser);
            return this.currentUser;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
            return null;
        }
    }
}

// =================== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ===================

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä API –∫–ª–∏–µ–Ω—Ç–∞
window.apiClient = new APIClient();

// –î–æ–±–∞–≤–ª—è–µ–º —É—Ç–∏–ª–∏—Ç—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
window.apiDebug = {
    // –¢–µ—Å—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    testAuth: async () => {
        try {
            const user = await window.apiClient.authenticateUser();
            console.log('‚úÖ –¢–µ—Å—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —É—Å–ø–µ—à–µ–Ω:', user);
            return user;
        } catch (error) {
            console.error('‚ùå –¢–µ—Å—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–≤–∞–ª–µ–Ω:', error);
            return null;
        }
    },
    
    // –¢–µ—Å—Ç API –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
    testAPI: async () => {
        const available = await window.apiClient.checkAvailability();
        console.log(`API ${available ? '‚úÖ –¥–æ—Å—Ç—É–ø–µ–Ω' : '‚ùå –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}`);
        return available;
    },
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    getCurrentUser: () => {
        console.log('üë§ –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', window.apiClient.currentUser);
        return window.apiClient.currentUser;
    },
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    refresh: async () => {
        const user = await window.apiClient.refreshUserData();
        console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ:', user);
        return user;
    }
};

console.log('‚úÖ CrazyGift API Client –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ');
console.log('üîß –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ window.apiDebug –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏');

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
window.apiClient.checkAvailability().then(available => {
    if (available) {
        console.log('üåü API —Å–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ');
    } else {
        console.warn('‚ö†Ô∏è API —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω fallback —Ä–µ–∂–∏–º');
    }
});