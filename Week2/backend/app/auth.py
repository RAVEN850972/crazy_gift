import hmac
import hashlib
import json
import time
from urllib.parse import unquote, parse_qsl
from typing import Optional, Dict, Any
from fastapi import HTTPException, status
from .config import settings
import logging

logger = logging.getLogger(__name__)


def verify_telegram_auth(init_data: str) -> Dict[str, Any]:
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ª–∏–Ω–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö Telegram WebApp
    –° –æ–±—Ö–æ–¥–æ–º –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤ DEBUG —Ä–µ–∂–∏–º–µ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    
    Args:
        init_data: –°—Ç—Ä–æ–∫–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –æ—Ç Telegram WebApp
        
    Returns:
        Dict —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
    Raises:
        HTTPException: –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã
    """
    
    # ========================================
    # DEBUG –†–ï–ñ–ò–ú - –ü–†–û–ü–£–°–ö–ê–ï–ú –í–ê–õ–ò–î–ê–¶–ò–Æ
    # ========================================
    if settings.debug:
        logger.warning("üîß DEBUG MODE: –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é Telegram auth –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏")
        
        try:
            # –ü–∞—Ä—Å–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∏
            parsed_data = dict(parse_qsl(init_data))
            logger.info(f"üîß DEBUG: –ü–æ–ª—É—á–µ–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: {list(parsed_data.keys())}")
            
            # –£–±–∏—Ä–∞–µ–º hash –∏–∑ –¥–∞–Ω–Ω—ã—Ö
            parsed_data.pop('hash', None)
            
            # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_data_str = parsed_data.get('user')
            if not user_data_str:
                # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ
                logger.info("üß™ –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è DEBUG —Ä–µ–∂–∏–º–∞")
                return {
                    'id': 123456789,
                    'first_name': 'Test',
                    'last_name': 'User',
                    'username': 'testuser',
                    'language_code': 'en',
                    'is_bot': False
                }
            
            try:
                user_data = json.loads(unquote(user_data_str))
                logger.info(f"üîß DEBUG: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {user_data}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
                if not user_data.get('id'):
                    logger.warning("üîß DEBUG: –ù–µ—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ")
                    return {
                        'id': 123456789,
                        'first_name': 'Test',
                        'last_name': 'User',
                        'username': 'testuser',
                        'language_code': 'en',
                        'is_bot': False
                    }
                
                return user_data
                
            except json.JSONDecodeError as e:
                logger.warning(f"üîß DEBUG: –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ user data ({e}), –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ")
                return {
                    'id': 123456789,
                    'first_name': 'Test',
                    'last_name': 'User',
                    'username': 'testuser',
                    'language_code': 'en',
                    'is_bot': False
                }
                
        except Exception as e:
            logger.warning(f"üîß DEBUG: –û–±—â–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ init_data ({e}), –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ")
            return {
                'id': 123456789,
                'first_name': 'Test',
                'last_name': 'User',  
                'username': 'testuser',
                'language_code': 'en',
                'is_bot': False
            }
    
    # ========================================
    # –ü–†–û–î–ê–ö–®–ï–ù –†–ï–ñ–ò–ú - –ü–û–õ–ù–ê–Ø –í–ê–õ–ò–î–ê–¶–ò–Ø
    # ========================================
    
    try:
        # –ü–∞—Ä—Å–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        parsed_data = dict(parse_qsl(init_data))
        
        # –ü–æ–ª—É—á–∞–µ–º hash
        received_hash = parsed_data.pop('hash', None)
        if not received_hash:
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail="Missing hash parameter"
            )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º auth_date (–¥–∞–Ω–Ω—ã–µ –Ω–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å—Ç–∞—Ä—à–µ 24 —á–∞—Å–æ–≤)
        auth_date = parsed_data.get('auth_date')
        if auth_date:
            try:
                auth_timestamp = int(auth_date)
                current_timestamp = int(time.time())
                
                # –î–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ä—à–µ 24 —á–∞—Å–æ–≤ —Å—á–∏—Ç–∞–µ–º –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º–∏
                if current_timestamp - auth_timestamp > 86400:  # 24 —á–∞—Å–∞
                    raise HTTPException(
                        status_code=status.HTTP_401_UNAUTHORIZED,
                        detail="Auth data is too old"
                    )
            except ValueError:
                raise HTTPException(
                    status_code=status.HTTP_400_BAD_REQUEST,
                    detail="Invalid auth_date format"
                )
        
        # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∏
        check_string = '\n'.join(
            f"{key}={value}" 
            for key, value in sorted(parsed_data.items())
        )
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á
        secret_key = hmac.new(
            "WebAppData".encode(),
            settings.telegram_bot_token.encode(),
            hashlib.sha256
        ).digest()
        
        # –í—ã—á–∏—Å–ª—è–µ–º –æ–∂–∏–¥–∞–µ–º—ã–π hash
        calculated_hash = hmac.new(
            secret_key,
            check_string.encode(),
            hashlib.sha256
        ).hexdigest()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å
        if not hmac.compare_digest(calculated_hash, received_hash):
            raise HTTPException(
                status_code=status.HTTP_401_UNAUTHORIZED,
                detail="Invalid hash signature"
            )
        
        # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data_str = parsed_data.get('user')
        if not user_data_str:
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail="Missing user data"
            )
        
        try:
            user_data = json.loads(unquote(user_data_str))
        except json.JSONDecodeError:
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail="Invalid user data format"
            )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        if not user_data.get('id'):
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail="Missing user ID"
            )
        
        return user_data
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"Unexpected auth error: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Authentication processing error"
        )


def extract_referral_code(start_param: Optional[str]) -> Optional[str]:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ –∏–∑ start_param
    
    Args:
        start_param: –ü–∞—Ä–∞–º–µ—Ç—Ä –∑–∞–ø—É—Å–∫–∞ –æ—Ç Telegram
        
    Returns:
        –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ –∏–ª–∏ None
    """
    if not start_param:
        return None
    
    # –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞: –µ—Å–ª–∏ start_param –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å "ref_", –∏–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–¥
    if start_param.startswith("ref_"):
        return start_param[4:]  # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å "ref_"
    
    return None


def generate_referral_code(telegram_id: int) -> str:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    Args:
        telegram_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
        
    Returns:
        –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥
    """
    # –ü—Ä–æ—Å—Ç–æ–π –∞–ª–≥–æ—Ä–∏—Ç–º: CG + –ø–æ—Å–ª–µ–¥–Ω–∏–µ 6 —Ü–∏—Ñ—Ä –æ—Ç telegram_id + checksum
    base = str(telegram_id)[-6:].zfill(6)
    
    # –ü—Ä–æ—Å—Ç–∞—è –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è —Å—É–º–º–∞
    checksum = sum(int(digit) for digit in base) % 10
    
    return f"CG{base}{checksum}"


def validate_user_data(user_data: Dict[str, Any]) -> Dict[str, Any]:
    """
    –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∏ –æ—á–∏—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    Args:
        user_data: –°—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç Telegram
        
    Returns:
        –û—á–∏—â–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    logger.info(f"üîç –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_data}")
    
    # –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
    telegram_id = user_data.get('id')
    
    if not telegram_id:
        logger.error("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç telegram ID")
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="Missing telegram ID"
        )
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ int –µ—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞
    if isinstance(telegram_id, str) and telegram_id.isdigit():
        telegram_id = int(telegram_id)
        
    if not isinstance(telegram_id, int) or telegram_id <= 0:
        logger.error(f"‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π telegram ID: {telegram_id}")
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="Invalid telegram ID"
        )
    
    # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–æ–ª—è —Å –æ—á–∏—Å—Ç–∫–æ–π
    username = user_data.get('username', '').strip()[:255] or None
    first_name = user_data.get('first_name', '').strip()[:255] or None
    last_name = user_data.get('last_name', '').strip()[:255] or None
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å username (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if username and not username.replace('_', '').replace('-', '').isalnum():
        username = None
    
    result = {
        'telegram_id': telegram_id,
        'username': username,
        'first_name': first_name,
        'last_name': last_name,
        'is_bot': user_data.get('is_bot', False),
        'language_code': user_data.get('language_code', 'en'),
        'auth_date': user_data.get('auth_date'),
        'start_param': user_data.get('start_param'),
    }
    
    logger.info(f"‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞: {result}")
    return result